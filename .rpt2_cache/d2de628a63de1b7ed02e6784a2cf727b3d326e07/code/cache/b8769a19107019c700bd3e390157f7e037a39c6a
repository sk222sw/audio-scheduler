{"code":"import { first, last } from \"./util\";\r\nvar ScheduleMode;\r\n(function (ScheduleMode) {\r\n    ScheduleMode[ScheduleMode[\"Infinite\"] = 0] = \"Infinite\";\r\n    ScheduleMode[ScheduleMode[\"Finite\"] = 1] = \"Finite\";\r\n})(ScheduleMode || (ScheduleMode = {}));\r\nvar AudioScheduler = /** @class */ (function () {\r\n    function AudioScheduler(options) {\r\n        this.initialIntervals = [];\r\n        this.intervalList = [];\r\n        this.mode = options.infinite ? ScheduleMode.Infinite : ScheduleMode.Finite;\r\n        this.initialIntervals = options.intervalLengths;\r\n        this.scheduleAheadTime = options.schedulAheadTime || 0.1;\r\n        this.intervalTime = options.intervalTime || 50;\r\n        this.tempo = options.tempo;\r\n        this.context = options.context || new AudioContext();\r\n    }\r\n    AudioScheduler.prototype._init = function () {\r\n        this.msTempo = 60000 / this.tempo;\r\n        this.intervalList = this.initialIntervals;\r\n    };\r\n    AudioScheduler.prototype._intervalLengthInMs = function () {\r\n        return this.msTempo / 1000;\r\n    };\r\n    AudioScheduler.prototype.setTempo = function (newTempo) {\r\n        this.tempo = newTempo;\r\n        this.msTempo = 60000 / this.tempo;\r\n    };\r\n    AudioScheduler.prototype._scheduler = function (currentTime, cb) {\r\n        if (!last(this.intervalList)) {\r\n            if (this.mode === ScheduleMode.Finite) {\r\n                this.stopInterval(this.setIntervalReference);\r\n            }\r\n            else {\r\n                this.intervalList = this.initialIntervals;\r\n            }\r\n            return;\r\n        }\r\n        var next = this._calculateNext(first(this.intervalList));\r\n        var shouldBeScheduled = currentTime + this.scheduleAheadTime;\r\n        if (next < shouldBeScheduled) {\r\n            this._runCallback(next, cb);\r\n        }\r\n    };\r\n    AudioScheduler.prototype._calculateNext = function (intervalLength) {\r\n        return ((this.lastIntervalStartedAt || 0) +\r\n            intervalLength * this._intervalLengthInMs());\r\n    };\r\n    AudioScheduler.prototype._runCallback = function (time, cb) {\r\n        this.intervalList = this.intervalList.slice(1, this.intervalList.length);\r\n        this.lastIntervalStartedAt = time;\r\n        cb(time);\r\n    };\r\n    AudioScheduler.prototype.startInterval = function (cb) {\r\n        var _this = this;\r\n        this._init();\r\n        this._runCallback(this.context.currentTime, cb);\r\n        var interval = setInterval(function (_) { return _this._scheduler(_this.context.currentTime, cb); }, this.intervalTime);\r\n        this.setIntervalReference = interval;\r\n        return interval;\r\n    };\r\n    AudioScheduler.prototype.stopInterval = function (interval) {\r\n        clearInterval(interval);\r\n    };\r\n    AudioScheduler.prototype.updateIntervals = function (intervalList) {\r\n        this.intervalList = intervalList;\r\n        this.initialIntervals = intervalList;\r\n    };\r\n    AudioScheduler.prototype.push = function (newInterval) {\r\n        this.intervalList = this.intervalList.concat([newInterval]);\r\n        this.initialIntervals = this.initialIntervals.concat([newInterval]);\r\n    };\r\n    AudioScheduler.prototype.shift = function () {\r\n        var _a = this.intervalList, _ = _a[0], intervals = _a.slice(1);\r\n        var _b = this.initialIntervals, __ = _b[0], initialIntervals = _b.slice(1);\r\n        this.intervalList = intervals;\r\n        this.initialIntervals = initialIntervals;\r\n    };\r\n    AudioScheduler.prototype.pop = function () {\r\n        var intervalList = this.intervalList.slice();\r\n        intervalList.pop();\r\n        this.intervalList = intervalList;\r\n        var initialIntervals = this.initialIntervals.slice();\r\n        initialIntervals.pop();\r\n        this.initialIntervals = initialIntervals;\r\n    };\r\n    return AudioScheduler;\r\n}());\r\nexport { AudioScheduler };\r\n//# sourceMappingURL=index.js.map","map":{"version":3,"file":"index.js","sourceRoot":"","sources":["src/index.ts"],"names":[],"mappings":"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"},"dts":{"name":"/home/ubuntu/workspace/audio-scheduler/index.d.ts","text":"export interface AudioSchedulerOptions {\r\n    tempo: number;\r\n    intervalLengths: number[];\r\n    context?: AudioContext;\r\n    infinite: boolean;\r\n    schedulAheadTime?: number;\r\n    intervalTime?: number;\r\n}\r\nexport declare class AudioScheduler {\r\n    private scheduleAheadTime;\r\n    private tempo;\r\n    private msTempo;\r\n    private context;\r\n    private initialIntervals;\r\n    private setIntervalReference;\r\n    private mode;\r\n    private lastIntervalStartedAt;\r\n    private intervalList;\r\n    private intervalTime;\r\n    constructor(options: AudioSchedulerOptions);\r\n    _init(): void;\r\n    _intervalLengthInMs(): number;\r\n    setTempo(newTempo: any): void;\r\n    _scheduler(currentTime: any, cb: any): void;\r\n    _calculateNext(intervalLength: any): number;\r\n    _runCallback(time: any, cb: any): void;\r\n    startInterval(cb: Function): number;\r\n    stopInterval(interval: any): void;\r\n    updateIntervals(intervalList: number[]): void;\r\n    push(newInterval: number): void;\r\n    shift(): void;\r\n    pop(): void;\r\n}\r\n"}}
